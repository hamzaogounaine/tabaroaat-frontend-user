import { Geist, Geist_Mono } from "next/font/google";
import { notFound } from "next/navigation";
import { NextIntlClientProvider } from "next-intl";
import { Analytics } from "@vercel/analytics/next";
import Navbar from "@/components/navbar/Navbar";
import "../globals.css";
import ApolloProviders from "./ApolloProvider";

// Fonts
const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

// Layout metadata
export const metadata = {
  title: "Tabaroaat",
  description: "Generated by create next app",
};

// Main layout component with locale param
export default async function LocaleLayout({ children, params: { locale } }) {
  let messages;
  try {
    messages = (await import(`../../../messages/${locale}.json`)).default;
  } catch (error) {
    notFound(); // fallback if locale not found
  }

  return (
    <ApolloProviders>
      <html
        lang={locale}
        className={`${geistSans.variable} ${geistMono.variable}`}
      >
        <head>
          <link rel="preconnect" href="https://fonts.googleapis.com" />
          <link
            rel="preconnect"
            href="https://fonts.gstatic.com"
            crossOrigin="anonymous"
          />
          <link
            href="https://fonts.googleapis.com/css2?family=Readex+Pro:wght@160..700&display=swap"
            rel="stylesheet"
          />
          <link rel="preconnect" href="https://fonts.googleapis.com" />
          <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
          <link
            href="https://fonts.googleapis.com/css2?family=Readex+Pro:wght@160..700&display=swap"
            rel="stylesheet"
          />
        </head>
        <body>
          <NextIntlClientProvider locale={locale} messages={messages}>
            <Navbar />
            <div className="p-20 ">{children}</div>
            <Analytics />
          </NextIntlClientProvider>
        </body>
      </html>
    </ApolloProviders>
  );
}
